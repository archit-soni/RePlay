{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","spotifyWebApi","Spotify","App","params","getHashParams","state","loggedIn","access_token","trackName","trackArtist","setAccessToken","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","i","name","artist","combined","getMyTopTracks","then","response","items","artists","concat","setState","prevState","className","href","onClick","getNowPlaying","this","map","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kJAAAA,EAAOC,QAAU,IAA0B,kC,iKCKrCC,EAAgB,I,OAAIC,GA4DXC,E,YAzDb,aAAc,IAAD,sBAEb,IAAMC,GADJ,+CACkBC,gBAFP,OAGb,EAAKC,MAAO,CACVC,WAAUH,EAAOI,aACjBC,UAAW,GACXC,YAAa,IAEXN,EAAOI,cACTP,EAAcU,eAAeP,EAAOI,cATzB,E,6EAgBX,IAHA,IACII,EADAC,EAAa,GACVC,EAAI,uBACPC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAC/BP,EAAIE,EAAEM,KAAKL,IAChBF,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IAE3C,OAAOC,I,sCAEO,IACVS,EACAC,EACAC,EACAC,EAJS,OAKbxB,EAAcyB,iBACbC,MAAK,SAACC,GACL,IAAKN,EAAI,EAAGA,EAAI,GAAIA,IAClBC,EAAOK,EAASC,MAAMP,GAAGC,KACzBC,EAASI,EAASC,MAAMP,GAAGQ,QAAQ,GAAGP,KACtCE,EAAWD,EAAOO,OAAO,MAAOR,GAClC,EAAKS,UAAS,SAAAC,GAAS,MAAK,CAC1BxB,UAAU,GAAD,mBAAMwB,EAAUxB,WAAhB,CAA2BgB,a,+BAQnC,IAAD,OACN,OACE,yBAAKS,UAAU,OACb,uBAAGC,KAAK,yBACN,uDAEF,4BAAQC,QAAS,kBAAM,EAAKC,kBAA5B,qBAGA,iCAAM,yBAAKH,UAAU,UAAf,KAA4BI,KAAKhC,MAAMG,UAAU8B,KAAI,SAAAhB,GAAI,OAAI,iCAAOA,EAAP,SAA2B,mC,GAnDlFiB,aCKEC,QACW,cAA7BzB,OAAOC,SAASyB,UAEe,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c855c37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\n\nconst spotifyWebApi = new Spotify();\n\nclass App extends Component {\n  constructor(){\n    super();\n  const params = this.getHashParams();\n  this.state ={\n    loggedIn: params.access_token ? true : false,\n    trackName: [],\n    trackArtist: []\n  }\n  if (params.access_token){\n    spotifyWebApi.setAccessToken(params.access_token)\n  }\n}\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n  getNowPlaying(){\n    var i;\n    var name;\n    var artist;\n    var combined;\n    spotifyWebApi.getMyTopTracks()\n    .then((response) => {\n      for (i = 0; i < 20; i++){\n        name = response.items[i].name\n        artist = response.items[i].artists[0].name\n        combined = artist.concat(\" - \", name)\n      this.setState(prevState => ({\n        trackName: [...prevState.trackName, combined],\n//        trackArtist: [...prevState.trackArtist, artist],\n      }\n    )\n  )}\n})\n}\n\nrender(){\n  return (\n    <div className=\"App\">\n      <a href='http://localhost:8888'>\n        <button>Login with Spotify</button>\n      </a>\n      <button onClick={() => this.getNowPlaying()}>\n       Check Now Playing\n      </button>\n      <div> <div className=\"Tracks\">  { this.state.trackName.map(name => <div> {name} </div>)}</div><br />\n      </div>\n\n    </div>\n  );\n }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}